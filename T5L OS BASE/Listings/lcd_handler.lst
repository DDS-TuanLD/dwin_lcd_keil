C51 COMPILER V9.57.0.0   LCD_HANDLER                                                       05/08/2021 13:18:31 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE LCD_HANDLER
OBJECT MODULE PLACED IN .\Objects\lcd_handler.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Sources\lcd_handler.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\lcd_handler.lst) TABS(2) OBJECT(.\Objects\lcd_handler.obj)

line level    source

   1          #include "lcd_handler.h"
   2          #include "uart.h"
   3          #include "dgus.h"
   4          #include "user_fifo.h"
   5          #include "tstring.h"
   6          #include "dgus.h"
   7          #include "norflash.h"
   8          #include "uart_handler.h"
   9          
  10          void lcd_send_uart_data_process(){
  11   1        if(is_uart_mess_response_waiting() == 1){
  12   2          return;
  13   2        }
  14   1        lcd_send_scene_call_uart_process();
  15   1      }
  16          
  17          void lcd_handler_uart_data_reiv_process(){
  18   1        uint16_t i;
  19   1        if((!is_uart_mess_response_waiting()) && (user_fifo_get_number_bytes_written() < UART_DATA_MIN_LEN)){
  20   2          return;
  21   2        }
  22   1        if(is_uart_mess_response_waiting()){
  23   2          DelayMs(200);
  24   2        }
  25   1        i = get_valid_data_header_loc();
  26   1        if((is_uart_mess_response_waiting()) && (user_fifo_get_number_bytes_written() < uart_last_mess_sent.len))
             -{
  27   2          Uart2SendStr(uart_last_mess_sent.dt, uart_last_mess_sent.len);
  28   2            uart_last_mess_sent.sent_count = uart_last_mess_sent.sent_count + 1;
  29   2            if(uart_last_mess_sent.sent_count > 5){
  30   3              uart_last_mess_sent.flag = 0;
  31   3              uart_last_mess_sent.sent_count = 0;
  32   3            }
  33   2        }
  34   1        if(i == 0xffff){
  35   2          uint16_t num = user_fifo_get_number_bytes_written();
  36   2          if(user_fifo_get_number_bytes_written() < UART_DATA_MIN_LEN){
  37   3            return;
  38   3          }
  39   2          DelayMs(50);
  40   2          if(num == user_fifo_get_number_bytes_written()){
  41   3            uint16_t j;
  42   3            uint8_t buff[UART_DATA_MAX_LEN];
  43   3            for(j = 0; j <num; j++){
  44   4              buff[j] = user_fifo_pop();
  45   4            }
  46   3            uart_data_handler(buff, num);
  47   3          }
  48   2          
  49   2        }else{
  50   2          uint16_t j;
  51   2          uint8_t buff[UART_DATA_MAX_LEN];
  52   2          for(j = 0;j <i;j++){
  53   3            buff[j] = user_fifo_pop();
C51 COMPILER V9.57.0.0   LCD_HANDLER                                                       05/08/2021 13:18:31 PAGE 2   

  54   3          }
  55   2          uart_data_handler(buff, i);
  56   2        }
  57   1        return;
  58   1      }
  59          
  60          void lcd_update_temp(){
  61   1        uint8_t temp_data[2] = {0};
  62   1        uint16_t temp;
  63   1        uint8_t temp_display_o[1];
  64   1        uint8_t temp_display_i[1];
  65   1        uint8_t temp_display_d[1];
  66   1        
  67   1        ReadNorFlash(LCD_TEM_SAVE_ADR, LCD_UPDATE_TEM_ADR, 2);
  68   1        ReadDGUS(LCD_UPDATE_TEM_ADR, temp_data, 2);
  69   1        
  70   1        temp_display_o[0] = temp_data[0] >> 7;
  71   1        temp_display_i[0] = temp_data[0] & 0x7f;
  72   1        temp_display_d[0] = temp_data[1];
  73   1        temp = temp_display_i[0] << 8 | temp_display_d[0];
  74   1        temp_display_i[0] = temp/10;
  75   1        temp_display_d[0] = temp%10;
  76   1        if(temp_display_o[0] == 1){
  77   2          
  78   2        }
  79   1        WriteDGUS(LCD_DISPLAY_TEM_ADR_O, temp_display_o, 1);
  80   1        WriteDGUS(LCD_DISPLAY_TEM_ADR_I, temp_display_i, 1);
  81   1        WriteDGUS(LCD_DISPLAY_TEM_ADR_D, temp_display_d, 1);
  82   1        return;
  83   1      }
  84          void lcd_update_humi(){
  85   1        uint8_t humi_data[2] = {0};
  86   1        uint8_t humi_i[1];
  87   1        uint8_t humi_d[1];
  88   1        ReadNorFlash(LCD_HUM_SAVE_ADR, LCD_UPDATE_HUM_ADR, 2);
  89   1        ReadDGUS(LCD_UPDATE_HUM_ADR, humi_data, 2);
  90   1        humi_i[0] = humi_data[0];
  91   1        humi_d[0] = humi_data[1];
  92   1        WriteDGUS(LCD_DISPLAY_HUM_ADR_I, humi_i, 1);
  93   1        WriteDGUS(LCD_DISPLAY_HUM_ADR_D, humi_d, 1);
  94   1        return;
  95   1      }
  96          
  97          void lcd_update_sensor_para(){
  98   1        lcd_update_temp();
  99   1        lcd_update_humi();
 100   1        return;
 101   1      }
 102          
 103          void lcd_update_real_time(){
 104   1        uint8_t time_data[2] = {0};
 105   1        uint8_t time_h[1];
 106   1        uint8_t time_m[1];
 107   1        ReadNorFlash(LCD_TIM_SAVE_ADR, LCD_UPDTE_TIME_ADR, 2);
 108   1        ReadDGUS(LCD_UPDTE_TIME_ADR, time_data, 2);
 109   1        time_h[0] = time_data[0];
 110   1        time_m[0] = time_data[1];
 111   1        WriteDGUS(LCD_DISPLAY_TIME_H_ADR, time_h, 1);
 112   1        WriteDGUS(LCD_DISPLAY_TIME_M_ADR, time_m, 1);
 113   1        return;
 114   1      }
 115          
C51 COMPILER V9.57.0.0   LCD_HANDLER                                                       05/08/2021 13:18:31 PAGE 3   

 116          void lcd_update_home_para(){
 117   1        lcd_update_sensor_para();
 118   1        lcd_update_real_time();
 119   1      }
 120          
 121          void lcd_para_init(){
 122   1        return ;
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    754    ----
   CONSTANT SIZE    =      6    ----
   XDATA SIZE       =   ----      49
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
